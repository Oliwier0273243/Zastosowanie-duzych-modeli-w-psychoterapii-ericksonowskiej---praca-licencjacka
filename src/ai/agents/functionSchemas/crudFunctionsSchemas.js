export const crudAgentFunctionSchemas = [
  {
    type: "function",
    function: {
      name: "think",
      description:
        "Use this tool to reason internally about the task before taking action. It is not visible to the user and is used for planning.",
      parameters: {
        type: "object",
        properties: {
          reasoning: {
            type: "string",
            description: "Internal reasoning and analysis about the next steps.",
          },
        },
        required: ["reasoning"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "response",
      description:
        "Send the final result, confirmation, or summary to the user after performing actions.",
      parameters: {
        type: "object",
        properties: {
          title: {
            type: "string",
            description: "Optional short title or heading for the message.",
          },
          response: {
            type: "string",
            description: "Detailed message or result to present to the user.",
          },
        },
        required: ["title", "response"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "patchUserContext",
      description:
        "Updates specific fields of the current user's context document. User ID is injected by backend, not by LLM.",
      parameters: {
        type: "object",
        properties: {
          targetUserId: {
            type: "string",
            description:
              "The ID of the user whose context should be updated. (Set by backend, not generated by LLM.)",
          },
          updates: {
            type: "object",
            description: "Object containing context fields to update (validated before saving).",
          },
        },
        required: ["targetUserId", "updates"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "postPatient",
      description:
        "Creates a new patient entry for the current user. The userId is automatically injected by backend.",
      parameters: {
        type: "object",
        properties: {
          patientData: {
            type: "object",
            description:
              "Patient data to create, e.g. { firstName, lastName, description, condition, summary }.",
          },
        },
        required: ["patientData"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "getPatient",
      description: "Retrieves details of a single patient owned by the current user.",
      parameters: {
        type: "object",
        properties: {
          patientId: {
            type: "string",
            description: "The ID of the patient to retrieve.",
          },
        },
        required: ["patientId"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "getPatients",
      description:
        "Lists patients belonging to the current user, with optional search, pagination, and sorting.",
      parameters: {
        type: "object",
        properties: {
          search: {
            type: "string",
            description: "Optional search term for full-text search.",
          },
          page: {
            type: "number",
            description: "Page number for pagination.",
            default: 1,
          },
          limit: {
            type: "number",
            description: "Maximum number of results per page.",
            default: 10,
          },
          sort: {
            type: "object",
            description: "Sorting options, e.g. { createdAt: -1 } for descending order.",
          },
        },
      },
    },
  },
  {
    type: "function",
    function: {
      name: "patchPatient",
      description:
        "Updates one or more fields of a patient document belonging to the current user.",
      parameters: {
        type: "object",
        properties: {
          patientId: {
            type: "string",
            description: "The ID of the patient to update.",
          },
          updates: {
            type: "object",
            description: "Partial patient data to update.",
          },
        },
        required: ["patientId", "updates"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "putPatient",
      description:
        "Replaces an entire patient document with new data. UserId is handled internally by backend.",
      parameters: {
        type: "object",
        properties: {
          patientId: {
            type: "string",
            description: "The ID of the patient to replace.",
          },
          newData: {
            type: "object",
            description: "Complete new patient data to replace the document.",
          },
        },
        required: ["patientId", "newData"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "deletePatient",
      description:
        "Deletes a patient record owned by the current user. Automatically also removes associated Pinecone vector.",
      parameters: {
        type: "object",
        properties: {
          patientId: {
            type: "string",
            description: "The ID of the patient to delete.",
          },
        },
        required: ["patientId"],
      },
    },
  },

  // ============================
  // üìù Note Management
  // ============================
  {
    type: "function",
    function: {
      name: "postNote",
      description: "Creates a new note for the current user. The userId is set by the backend.",
      parameters: {
        type: "object",
        properties: {
          noteData: {
            type: "object",
            description: "Data for the new note (title, text, etc.).",
          },
        },
        required: ["noteData"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "getNote",
      description: "Retrieves a specific note by ID, belonging to the current user.",
      parameters: {
        type: "object",
        properties: {
          noteId: {
            type: "string",
            description: "The ID of the note to retrieve.",
          },
        },
        required: ["noteId"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "getNotes",
      description:
        "Lists notes belonging to the current user, with optional text search, pagination, and sorting.",
      parameters: {
        type: "object",
        properties: {
          search: {
            type: "string",
            description: "Optional text search query.",
          },
          page: {
            type: "number",
            description: "Page number (default: 1).",
            default: 1,
          },
          limit: {
            type: "number",
            description: "Maximum number of notes per page (default: 10).",
            default: 10,
          },
          sort: {
            type: "object",
            description: "Sorting options, e.g. { createdAt: -1 } for descending order.",
          },
        },
      },
    },
  },
  {
    type: "function",
    function: {
      name: "patchNote",
      description: "Updates one or more fields of an existing note belonging to the current user.",
      parameters: {
        type: "object",
        properties: {
          noteId: {
            type: "string",
            description: "The ID of the note to update.",
          },
          updates: {
            type: "object",
            description: "Partial note data to update.",
          },
        },
        required: ["noteId", "updates"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "putNote",
      description:
        "Replaces an entire note document with new data. UserId is handled internally by backend.",
      parameters: {
        type: "object",
        properties: {
          noteId: {
            type: "string",
            description: "The ID of the note to replace.",
          },
          newData: {
            type: "object",
            description: "Complete note data to replace the document.",
          },
        },
        required: ["noteId", "newData"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "deleteNote",
      description:
        "Deletes a note belonging to the current user and removes its vector from Pinecone.",
      parameters: {
        type: "object",
        properties: {
          noteId: {
            type: "string",
            description: "The ID of the note to delete.",
          },
        },
        required: ["noteId"],
      },
    },
  },
];
